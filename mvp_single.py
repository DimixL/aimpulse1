# mvp_single.py
import io, os, sys
import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# --- —á—Ç–æ–±—ã –ø–æ–¥—Ö–≤–∞—Ç–∏–ª–∏—Å—å –Ω–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (inference_v2, features, mvp_model_runtime) ---
sys.path.append(os.path.dirname(__file__))

from inference_v2 import load_predictor

st.set_page_config(page_title="–ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSV (MVP)", layout="wide")

# ===== –ó–ê–ì–û–õ–û–í–û–ö =====
st.title("üîÆ –ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ CSV (MVP)")
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (3 –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–∫–∞ A,B,C) ‚Äî –ø–æ–ª—É—á–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞, —Ç–∏–ø, severity –∏ TTF.")

# ===== –ú–û–î–ï–õ–¨ (–∫—ç—à —Ä–µ—Å—É—Ä—Å–∞) =====
@st.cache_resource(show_spinner=False)
def _load_predictor():
    return load_predictor(model_dir="models")
predictor = _load_predictor()

# ===== –°–ê–ô–î–ë–ê–†: –ù–ê–°–¢–†–û–ô–ö–ò =====
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    fs_out  = st.select_slider("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ì—Ü", [2000, 3200, 5120], value=3200)
    win_sec = st.select_slider("–û–∫–Ω–æ, —Å–µ–∫", [0.5, 1.0, 2.0], value=1.0)
    overlap = st.select_slider("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ", [0.0, 0.25, 0.5], value=0.0)
    st.divider()
    st.header("–ü–æ–¥—à–∏–ø–Ω–∏–∫ / RPM")
    rpm   = st.number_input("RPM", 500, 6000, 1770, step=10)
    Z     = st.number_input("Z (—á–∏—Å–ª–æ —Ç–µ–ª –∫–∞—á–µ–Ω–∏—è)", 3, 20, 9, step=1)
    dmm   = st.number_input("d, –º–º (—à–∞—Ä–∏–∫/—Ä–æ–ª–∏–∫)", value=7.94, step=0.01, format="%.2f")
    Dmm   = st.number_input("D, –º–º (–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è)", value=38.5, step=0.1, format="%.1f")
    theta = st.number_input("–£–≥–æ–ª –∫–æ–Ω—Ç–∞–∫—Ç–∞, ¬∞", value=0, step=1)
    st.caption(f"–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏–∑ –º–æ–¥–µ–ª–∏: **{predictor.info.get('bin_threshold',0.5):.3f}**")

# ===== –§–ê–ô–õ =====
up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ (A,B,C)", type=["csv"])
if not up:
    st.stop()

data_bytes = up.read()

# ===== –ò–ù–§–ï–†–ï–ù–° =====
try:
    with st.spinner("–°—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è..."):
        df_pred, agg = predictor.predict_csv(
            io.BytesIO(data_bytes),
            fs_raw=25600, fs_out=fs_out,
            win_sec=win_sec, overlap=overlap,
            rpm=float(rpm), Z=int(Z), dmm=float(dmm), Dmm=float(Dmm), theta=int(theta)
        )
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
    st.stop()

# ===== KPI / –í–ï–†–î–ò–ö–¢ =====
thr = agg["thr_bin"]
verdict = "–î–ï–§–ï–ö–¢" if (agg["p_def_mean"] >= thr or agg["p_def_share_over_thr"] >= 0.2) else "–ù–û–†–ú–ê"
emoji = "üî¥" if verdict == "–î–ï–§–ï–ö–¢" else "üü¢"

k1, k2, k3, k4 = st.columns(4)
k1.metric("–í–µ—Ä–¥–∏–∫—Ç", f"{emoji} {verdict}")
k2.metric("–°—Ä–µ–¥–Ω—è—è p(defect)", f"{agg['p_def_mean']:.2f}")
k3.metric("–û–∫–æ–Ω ‚â• –ø–æ—Ä–æ–≥–∞", f"{100*agg['p_def_share_over_thr']:.0f}%")
k4.metric("TTF –¥–æ severity=80", "‚àû" if np.isinf(agg["ttf_to_80_sec"]) else f"{agg['ttf_to_80_sec']:.0f} c")

k5, k6, k7 = st.columns(3)
k5.metric("–ö–ª–∞—Å—Å —Ñ–∞–π–ª–∞ (7)", agg["file_class7"])
k6.metric("–ö–ª–∞—Å—Å —Ñ–∞–π–ª–∞ (3)", agg["file_class3"])
k7.metric("Severity avg / max", f"{agg['severity_mean']:.1f} / {agg['severity_max']:.1f}")

st.divider()

# ===== –ì–†–ê–§–ò–ö–ò =====
c1, c2 = st.columns(2)

with c1:
    st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    fig1 = go.Figure()
    fig1.add_trace(go.Scatter(x=df_pred["t1"], y=df_pred["p_def"], mode="lines", name="p(defect)"))
    fig1.add_hline(y=thr, line_dash="dot", annotation_text="–ø–æ—Ä–æ–≥", annotation_position="top left")
    fig1.update_layout(height=280, xaxis_title="–í—Ä–µ–º—è, c", yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
    st.plotly_chart(fig1, use_container_width=True)

with c2:
    st.subheader("Severity (0..100) –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    fig2 = go.Figure()
    fig2.add_trace(go.Scatter(x=df_pred["t1"], y=df_pred["severity"], mode="lines", name="severity"))
    fig2.add_hline(y=50, line_dash="dot", annotation_text="warning")
    fig2.add_hline(y=80, line_dash="dot", annotation_text="alarm")
    fig2.update_layout(height=280, xaxis_title="–í—Ä–µ–º—è, c", yaxis_title="Severity")
    st.plotly_chart(fig2, use_container_width=True)

st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ —Ñ–∞–π–ª—É)")
labels7 = predictor.labels7 if hasattr(predictor, "labels7") else ["normal","BPFO","BPFI","BSF","FTF","imbalance","misalignment"]
p7 = np.array(agg["file_p7"])
df_p7 = pd.DataFrame({"class": labels7, "prob": p7})
fig_p7 = px.bar(df_p7, x="class", y="prob", text="prob")
fig_p7.update_traces(texttemplate="%{text:.2f}", textposition="outside")
fig_p7.update_layout(height=280, yaxis_range=[0,1], margin=dict(t=20))
st.plotly_chart(fig_p7, use_container_width=True)

# ===== –¢–ê–ë–õ–ò–¶–ê –û–ö–û–ù =====
st.subheader("–û–∫–Ω–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∏—Å–∫–æ–º")
top = df_pred.sort_values(["p_def","severity"], ascending=False).head(25)[["t0","t1","p_def","y_pred","severity"]]
st.dataframe(top, use_container_width=True, height=340)

# ===== –≠–ö–°–ü–û–†–¢ =====
st.download_button(
    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –æ–∫–Ω–∞–º (CSV)",
    df_pred.to_csv(index=False).encode("utf-8"),
    file_name=f"report_{up.name}.csv",
    mime="text/csv"
)
