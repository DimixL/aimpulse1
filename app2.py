# app.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import io
import math
import html
from dataclasses import dataclass, field
from datetime import datetime
import glob, os, random
from typing import List, Optional, Literal

try:
    from streamlit_autorefresh import st_autorefresh
except Exception:
    def st_autorefresh(*args, **kwargs):
        return None

try:
    from streamlit.runtime.scriptrunner import add_script_run_ctx  # noqa: F401 - optional helper
except Exception:
    pass

try:
    from inference_v2 import LABELS_ALL as _LABELS_ALL
except Exception:
    _LABELS_ALL = [
        "normal",
        "BPFO",
        "BPFI",
        "BSF",
        "FTF",
        "imbalance",
        "misalignment",
    ]

st.set_page_config(page_title="–ò–ò–º–ø—É–ª—å—Å", layout="wide")

st.markdown("""
<style>
/* –ë–∞–Ω–Ω–µ—Ä—ã */
.big-banner{padding:18px 22px;border-radius:14px;display:flex;gap:14px;align-items:flex-start;margin:6px 0 14px;border:1px solid}
.big-banner .title{font-weight:800;font-size:22px;line-height:1.25;margin:0}
.big-banner .subtitle{margin:6px 0 0;font-size:14px;opacity:.85}
.big-banner.danger{background:#fee2e2;border-color:#fecaca;color:#7f1d1d}
.big-banner.ok{background:#e7f8ee;border-color:#c7f0d9;color:#064e3b}

/* –ß–∏–ø—ã */
.badge{display:inline-block;padding:6px 10px;border-radius:999px;background:#F3F4F6;
       font-weight:600;font-size:13px;margin-right:8px}

/* KPI –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥ –±–∞–Ω–Ω–µ—Ä–æ–º */
.kpi-grid{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:12px;margin:6px 0 18px}
.kpi{padding:14px;border-radius:12px;background:#F8FAFC;border:1px solid #EFF2F6}
.kpi .label{font-size:12px;color:#64748B;text-transform:uppercase;letter-spacing:.02em}
.kpi .value{font-size:24px;font-weight:700;margin-top:4px}
@media (max-width:1100px){.kpi-grid{grid-template-columns:repeat(2,minmax(0,1fr))}}
</style>
""", unsafe_allow_html=True)

# --- Blue accent everywhere (sliders / radios / toggles / buttons) ---
st.markdown("""
<style>
/* 0) –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞—ë–º primary-—Ü–≤–µ—Ç –¥–ª—è Streamlit-—Ç–µ–º—ã */
:root{
  --primary-color:#2563EB !important;          /* –≥–ª–∞–≤–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç */
  --text-color:#111827;
}

/* 1) SLIDER: –±–µ–≥—É–Ω–æ–∫ */
div[data-baseweb="slider"] [role="slider"]{
  background-color: var(--primary-color) !important;
  border-color: var(--primary-color) !important;
  box-shadow: 0 0 0 2px rgba(37,99,235,.22) !important;
}

/* 2) SLIDER: –∞–∫—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å —Ç—Ä–µ–∫–∞
   (–ø–æ–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–ª–∞—Å—Å—ã BaseWeb –∏ –¥–∞–∂–µ –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–∏ –ø–æ —Ü–≤–µ—Ç—É) */
div[data-baseweb="slider"] > div > div > div[aria-hidden="true"],
div[data-baseweb="slider"] .Track,
div[data-baseweb="slider"] .css-1ldw2k6-Track,
div[data-baseweb="slider"] div[style*="rgb(255, 75, 75)"]{          /* –ª–æ–≤–∏–º –∫—Ä–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
  background-color: var(--primary-color) !important;
}

/* 3) –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥ –±–µ–≥—É–Ω–∫–æ–º (–æ–±—ã—á–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ) ‚Äî –¥–µ–ª–∞–µ–º —Å–∏–Ω–∏–º */
div[data-testid="stSlider"] [data-baseweb="slider"] span,
div[data-testid="stSlider"] .stSliderValue,
div[data-baseweb="slider"] span[style*="rgb(255, 75, 75)"]{         /* –µ—Å–ª–∏ —Ü–≤–µ—Ç –ø—Ä–∏—à—ë–ª –∏–Ω–ª–∞–π–Ω–æ–º */
  color: var(--primary-color) !important;
}

/* 4) Toggle / Switch */
div[role="switch"][aria-checked="true"]{
  background-color: var(--primary-color) !important;
  border-color: var(--primary-color) !important;
}

/* 5) Radio / Checkbox */
div[role="radio"][aria-checked="true"] > div,
div[role="checkbox"][aria-checked="true"] > div{
  background-color: var(--primary-color) !important;
  border-color: var(--primary-color) !important;
}

/* 6) –ö–Ω–æ–ø–∫–∏ */
.stButton>button, .stDownloadButton>button{
  border-color: var(--primary-color) !important;
}
.stButton>button:hover, .stDownloadButton>button:hover{
  background: rgba(37,99,235,.08) !important;
}
</style>
""", unsafe_allow_html=True)

# MONITOR: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π CSS –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ / —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
st.markdown("""
<style>
.mon-grid{display:grid;grid-template-columns:repeat(3,minmax(0,1fr));gap:16px;margin:10px 0 18px}
@media (max-width:1200px){.mon-grid{grid-template-columns:repeat(2,minmax(0,1fr))}}
@media (max-width:768px){.mon-grid{grid-template-columns:repeat(1,minmax(0,1fr))}}
.mon-card{position:relative;background:#fff;border-radius:16px;border:1px solid #E5E7EB;padding:16px;box-shadow:0 6px 16px rgba(15,23,42,0.08);display:flex;flex-direction:column;gap:10px;min-height:200px}
.mon-card.alarm{background:#fee2e2;border-color:#fecaca;color:#7f1d1d}
.mon-card.warn{background:#fef3c7;border-color:#fde68a;color:#78350f}
.mon-card.ok{background:#e7f8ee;border-color:#c7f0d9;color:#064e3b}
.mon-card .mon-card-head{display:flex;justify-content:space-between;align-items:flex-start;gap:8px}
.mon-card-title{font-weight:700;font-size:20px}
.mon-badge{background:#f3f4f6;color:#4b5563;border-radius:999px;padding:4px 10px;font-size:11px;font-weight:600;text-transform:uppercase;white-space:nowrap}
.mon-badge.mon-badge--ghost{visibility:hidden}
.mon-card-equip{font-size:14px;font-weight:600;color:#1f2937}
.mon-card.alarm .mon-card-equip{color:#7f1d1d}
.mon-card.warn .mon-card-equip{color:#78350f}
.mon-card.ok .mon-card-equip{color:#064e3b}
.mon-card-shop{font-size:13px;color:rgba(55,65,81,0.9)}
.mon-card-viol{font-size:13px;color:rgba(17,24,39,0.92)}
.mon-pill{display:inline-flex;align-items:center;border-radius:999px;padding:4px 10px;margin:4px 4px 0 0;font-weight:600;font-size:12px;color:#111827;background:#E5E7EB}
.mon-pill.alarm{background:#ef4444;color:#fff}
.mon-pill.warn{background:#f59e0b;color:#fff}
.mon-pill.ok{background:#10b981;color:#fff}
.mon-ttf{font-size:12px;color:#b91c1c;font-style:italic}
.mon-card-caption{font-size:12px;color:#4b5563}
.mon-ai-holder{margin-top:auto;border:1px dashed rgba(30,64,175,0.45);border-radius:12px;padding:6px 10px;background:rgba(37,99,235,0.06)}
.mon-ai-holder summary{list-style:none;cursor:pointer;display:flex;align-items:center;gap:6px;color:#1d4ed8;font-size:12px;font-weight:600}
.mon-ai-holder summary::-webkit-details-marker{display:none}
.mon-ai-holder[open]{background:rgba(37,99,235,0.12)}
.mon-ai-holder div{margin-top:6px;font-size:12px;color:#1f2937;line-height:1.4}
.mon-sticky-wrap{position:sticky;bottom:0;margin-top:22px;z-index:20}
.mon-sticky{background:rgba(17,24,39,0.92);color:#fff;border-radius:14px;padding:10px 14px;display:flex;align-items:center;gap:12px;overflow:hidden}
.mon-chip-list{display:flex;gap:10px;overflow-x:auto;scrollbar-width:thin;padding-bottom:4px}
.mon-chip{flex:0 0 auto;padding:6px 12px;border-radius:999px;font-size:12px;font-weight:600;white-space:nowrap}
.mon-chip.alarm{background:#ef4444}
.mon-chip.warn{background:#f59e0b;color:#111827}
.mon-chip.ok{background:#10b981;color:#fff}
.mon-chevron{margin-left:auto;font-size:18px;cursor:pointer}
.mon-chevron a{color:#fff;text-decoration:none;display:inline-flex;align-items:center;padding:4px}
.mon-empty{font-size:12px;color:#9ca3af}
</style>
""", unsafe_allow_html=True)

# ---- AUTH --- –ø—Ä–æ—Å—Ç–æ–π fallback ----
USE_ADV_AUTH = False
name = "–ò–Ω–∂–µ–Ω–µ—Ä"

try:
    import streamlit_authenticator as stauth
    import toml

    config = toml.load("config_auth.toml")
    authenticator = stauth.Authenticate(
        config['credentials'], config['cookie']['name'],
        config['cookie']['key'], config['cookie']['expiry_days']
    )
    name, auth_status, username = authenticator.login('–í—Ö–æ–¥', 'main')
    if not auth_status:
        if auth_status is False:
            st.error('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å')
        st.stop()
    authenticator.logout('–í—ã–π—Ç–∏', 'sidebar')
    USE_ADV_AUTH = True
except ModuleNotFoundError:
    # –ø—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥ –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–∞–∫–µ—Ç–∞
    st.sidebar.subheader("–í—Ö–æ–¥")
    st.session_state.setdefault("auth_ok", False)
    if not st.session_state["auth_ok"]:
        user = st.sidebar.text_input("–õ–æ–≥–∏–Ω", value="user1")
        pwd = st.sidebar.text_input("–ü–∞—Ä–æ–ª—å", type="password", value="admin")
        if st.sidebar.button("–í–æ–π—Ç–∏"):
            if user == "user1" and pwd == "admin":
                st.session_state["auth_ok"] = True
            else:
                st.sidebar.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        if not st.session_state["auth_ok"]:
            st.stop()
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        st.session_state["auth_ok"] = False
        st.rerun()

# --- Sidebar: –ø—Ä–æ—Ñ–∏–ª—å / —Å–ø—Ä–∞–≤–∫–∞ ---
display_name = name if USE_ADV_AUTH else st.session_state.get("user_name", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
with st.sidebar:
    st.markdown(f"### üë§ {display_name}")
    try:
        # Streamlit 1.30+ ‚Äî –µ—Å—Ç—å popover
        with st.popover("–ü—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø—Ä–∞–≤–∫–∞"):
            st.write("""
**–ò–º—è:** {dn}  
**–†–æ–ª—å:** –ò–Ω–∂–µ–Ω–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç  
**–ö–æ–Ω—Ç–∞–∫—Ç—ã:** ivan.ivanov@example.com

‚Äî –°–ø—Ä–∞–≤–∫–∞:
- –ê–ª–∞—Ä–º = severity ‚â• 80 –∏–ª–∏ p(defect) ‚â• 0.8  
- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ = severity ‚â• 50 –∏–ª–∏ p(defect) ‚â• 0.5  
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤ ‚Äî —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ `proba` –ø–æ –æ–∫–Ω–∞–º
            """.format(dn=display_name))
    except Exception:
        # –ù–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –º–æ–∂–Ω–æ expander
        with st.expander("–ü—Ä–æ—Ñ–∏–ª—å –∏ —Å–ø—Ä–∞–≤–∫–∞"):
            st.write("–ò–º—è: " + display_name)
            st.write("–†–æ–ª—å: –ò–Ω–∂–µ–Ω–µ—Ä-–¥–∏–∞–≥–Ω–æ—Å—Ç")
            st.write("–ö–æ–Ω—Ç–∞–∫—Ç—ã: ivan.ivanov@example.com")
            st.write("–ê–ª–∞—Ä–º: severity ‚â• 80 –∏–ª–∏ p(defect) ‚â• 0.8")
            st.write("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: severity ‚â• 50 –∏–ª–∏ p(defect) ‚â• 0.5")

# MONITOR: –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∏ —Ö–µ–ª–ø–µ—Ä—ã
Status = Literal["ok", "warn", "alarm"]


@dataclass
class Violation:
    label_ru: str
    prob: float
    ttf_hours: Optional[float] = None


@dataclass
class MotorCard:
    id: str
    shop: str
    equip_name: str
    status: Status
    violations: List[Violation]
    info_badge: bool = True
    updated_at: pd.Timestamp = field(default_factory=lambda: pd.Timestamp.now(tz=None))


_CLASS_LABELS_RU = {
    "normal": "–ù–æ—Ä–º–∞",
    "BPFO": "–î–µ—Ñ–µ–∫—Ç –Ω–∞—Ä—É–∂–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞",
    "BPFI": "–î–µ—Ñ–µ–∫—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–æ–ª—å—Ü–∞",
    "BSF": "–î–µ—Ñ–µ–∫—Ç —Ç–µ–ª –∫–∞—á–µ–Ω–∏—è",
    "FTF": "–î–µ—Ñ–µ–∫—Ç —Å–µ–ø–∞—Ä–∞—Ç–æ—Ä–∞",
    "imbalance": "–î–∏—Å–±–∞–ª–∞–Ω—Å",
    "misalignment": "–†–∞–∑—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞",
}


def _advice_text(status: Status) -> str:
    if status == "alarm":
        return (
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤ –∏ –æ—Å–º–æ—Ç—Ä.\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫ –∏ –≤–∏–±—Ä–æ–∫–∞–Ω–∞–ª—ã, —Ä–∞–∑–Ω–∏—Ü—É —Ñ–∞–∑, –Ω–∞–≥—Ä—É–∑–∫—É."
        )
    if status == "warn":
        return (
            "‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –æ–∫–Ω–æ.\n"
            "‚Ä¢ –°–≤–µ—Ä—å—Ç–µ –ª—é—Ñ—Ç—ã –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É."
        )
    return "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —Ç—Ä–µ–≤–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


def _violations_html(card: MotorCard) -> str:
    parts = []
    for viol in card.violations[:2]:
        pill_class = f"mon-pill {card.status if card.status in ('alarm', 'warn') else 'ok'}"
        parts.append(
            f"<span class='{pill_class}'>{viol.prob * 100:.0f}%&nbsp;{html.escape(viol.label_ru)}</span>"
        )
        if viol.ttf_hours and math.isfinite(viol.ttf_hours):
            parts.append(
                f"<div class='mon-ttf'>–û—Ç–∫–∞–∑ —á–µ—Ä–µ–∑ {viol.ttf_hours:.0f} —á</div>"
            )
    if not parts:
        parts.append("<span class='mon-pill ok'>0%&nbsp;–ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ—Ç</span>")
    return "".join(parts)


def generate_demo_monitor(seed: int = 42) -> List[MotorCard]:
    random.seed(seed)
    shops = ["–ê–≥—Ä–µ–≥–∞—Ç 1", "–ê–≥—Ä–µ–≥–∞—Ç 2", "–ê–≥—Ä–µ–≥–∞—Ç 3"]
    equips = [
        "–ù–∞—Å–æ—Å –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞ 101",
        "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è 5",
        "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–∏–Ω–∏–∏ 2",
        "–î—ã–º–æ—Å–æ—Å 4",
        "–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ–¥–∞—á–∏ 7",
        "–ü–æ–º–ø–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è 3",
        "–ü—Ä–∏–≤–æ–¥ –º–µ—à–∞–ª–∫–∏ 8",
        "–í–∏–±—Ä–æ–ø—Ä–µ—Å—Å 6",
    ]
    statuses = ["ok", "warn", "alarm"]
    cards: List[MotorCard] = []
    count = random.randint(8, 12)
    for idx in range(count):
        status = random.choices(statuses, weights=[0.45, 0.35, 0.2])[0]
        equip = random.choice(equips)
        shop = random.choice(shops)
        card_id = f"U-{10 + idx}"
        viols: List[Violation] = []
        if status in ("warn", "alarm"):
            top_classes = random.sample(_LABELS_ALL[1:], k=2)
            for j, cls in enumerate(top_classes):
                prob = 0.55 + 0.4 * random.random() if j == 0 else 0.3 + 0.3 * random.random()
                viols.append(
                    Violation(
                        label_ru=_CLASS_LABELS_RU.get(cls, cls),
                        prob=min(prob, 0.99),
                        ttf_hours=(4.0 + random.random() * 12.0) if status == "alarm" and j == 0 else None,
                    )
                )
        cards.append(
            MotorCard(
                id=card_id,
                shop=shop,
                equip_name=equip,
                status=status,  # type: ignore[arg-type]
                violations=viols,
                info_badge=bool(random.getrandbits(1)),
                updated_at=pd.Timestamp.now(tz=None),
            )
        )
    return cards


@st.cache_resource(show_spinner=False)
def _load_predictor_cached():
    try:
        from inference_v2 import load_predictor

        return load_predictor()
    except Exception:
        return None


@st.cache_data(show_spinner=False)
def _cached_file_summary(path: str, limit_seconds: float) -> Optional[dict]:
    predictor = _load_predictor_cached()
    if predictor is None:
        return None
    try:
        df, agg = predictor.predict_csv(
            path,
            fs_raw=25600,
            fs_out=3200,
            win_sec=1.0,
            overlap=0.0,
        )
    except Exception:
        return None

    if isinstance(df, pd.DataFrame):
        if "t1" in df.columns:
            df_small = df[df["t1"] <= limit_seconds]
        else:
            df_small = df.copy()
        if df_small.empty:
            df_small = df.head(3)
    else:
        df_small = pd.DataFrame(df)

    if df_small.empty:
        return None

    thr = float(agg.get("thr_bin", 0.5)) if isinstance(agg, dict) else 0.5
    p_def_series = pd.to_numeric(df_small.get("p_def", pd.Series(dtype=float)), errors="coerce").fillna(0.0)
    p_def_mean = float(p_def_series.mean()) if not p_def_series.empty else 0.0
    share = float((p_def_series >= thr).mean()) if not p_def_series.empty else 0.0

    status: Status
    if p_def_mean >= thr or share >= 0.2:
        status = "alarm"
    elif p_def_mean >= 0.5:
        status = "warn"
    else:
        status = "ok"

    if "p7" in df_small:
        rows = []
        for val in df_small["p7"]:
            try:
                rows.append(np.asarray(val, dtype=float))
            except Exception:
                continue
        arr = np.vstack(rows) if rows else np.array([])
    else:
        arr = np.array([])
    if arr.size:
        mean_p7 = arr.mean(axis=0)
    else:
        mean_p7 = np.zeros(len(_LABELS_ALL))
        mean_p7[0] = 1.0
    top_idx = np.argsort(mean_p7)[::-1][:2]
    violations = []
    for idx in top_idx:
        label = _LABELS_ALL[idx] if idx < len(_LABELS_ALL) else "normal"
        violations.append(
            {
                "label_ru": _CLASS_LABELS_RU.get(label, label),
                "prob": float(mean_p7[idx]),
            }
        )
    ttf_hours = None
    if isinstance(agg, dict) and agg.get("ttf_to_80_sec") not in (None, float("inf")):
        try:
            ttf_hours = float(agg["ttf_to_80_sec"]) / 3600.0
        except Exception:
            ttf_hours = None
    return {
        "status": status,
        "violations": violations,
        "ttf_hours": ttf_hours,
        "p_def_mean": p_def_mean,
        "share": share,
    }


def fetch_monitor_data(calc_live: bool, file_limit: int = 12, limit_seconds: float = 12.0) -> List[MotorCard]:
    if not calc_live:
        return generate_demo_monitor()

    files = sorted(glob.glob("data/raw/*.csv"))[: file_limit or 1]
    if not files:
        return generate_demo_monitor()

    cards: List[MotorCard] = []
    for idx, path in enumerate(files):
        summary = _cached_file_summary(path, limit_seconds)
        if summary is None:
            continue
        violations = [
            Violation(
                label_ru=v.get("label_ru", "–ê–Ω–æ–º–∞–ª–∏—è"),
                prob=float(v.get("prob", 0.0)),
                ttf_hours=summary.get("ttf_hours") if n == 0 else None,
            )
            for n, v in enumerate(summary.get("violations", [])[:2])
        ]
        equip_name = os.path.splitext(os.path.basename(path))[0]
        cards.append(
            MotorCard(
                id=f"CSV-{idx + 1}",
                shop=f"–¶–µ—Ö {1 + (idx % 3)}",
                equip_name=equip_name,
                status=summary.get("status", "ok"),  # type: ignore[arg-type]
                violations=violations,
                info_badge=True,
                updated_at=pd.Timestamp.now(tz=None),
            )
        )

    if not cards:
        return generate_demo_monitor()
    return cards


def build_notifications_from_cards(cards: List[MotorCard]) -> pd.DataFrame:
    rows = []
    for card in cards:
        if card.status not in ("alarm", "warn"):
            continue
        msg = card.violations[0].label_ru if card.violations else "–ê–Ω–æ–º–∞–ª–∏—è"
        if card.violations and card.violations[0].ttf_hours:
            msg += f" ¬∑ –û—Ç–∫–∞–∑ —á–µ—Ä–µ–∑ {card.violations[0].ttf_hours:.0f} —á"
        rows.append(
            {
                "ts": card.updated_at,
                "severity": card.status,
                "shop": card.shop,
                "equip": card.equip_name,
                "message": msg,
            }
        )
    if not rows:
        return pd.DataFrame(columns=["ts", "severity", "shop", "equip", "message"])
    df = pd.DataFrame(rows)
    df["ts"] = pd.to_datetime(df["ts"], errors="coerce")
    return df.sort_values("ts")


def _render_notifications_bar(notifications: pd.DataFrame) -> None:
    if notifications.empty:
        st.markdown(
            """
            <div class="mon-sticky-wrap">
                <div class="mon-sticky"><div class="mon-empty">–ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç</div></div>
            </div>
            """,
            unsafe_allow_html=True,
        )
        return

    chips = []
    for _, row in notifications.iterrows():
        ts = pd.to_datetime(row["ts"]).strftime("%d.%m.%Y %H:%M")
        sev = row.get("severity", "warn")
        shop = html.escape(str(row.get("shop", "–¶–µ—Ö")))
        equip = html.escape(str(row.get("equip", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")))
        message = html.escape(str(row.get("message", "–°–æ–±—ã—Ç–∏–µ")))
        chips.append(
            f"<span class='mon-chip {sev}'>{ts} | {shop} {equip} | {message}</span>"
        )

    st.markdown(
        """
        <div class="mon-sticky-wrap">
            <div class="mon-sticky">
                <div class="mon-chip-list">{chips}</div>
                <div class="mon-chevron"><a href="#monitor-notifications-panel">‚ñ∂</a></div>
            </div>
        </div>
        """.format(chips="".join(chips)),
        unsafe_allow_html=True,
    )

    st.markdown("<div id='monitor-notifications-panel'></div>", unsafe_allow_html=True)

    with st.expander("–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", expanded=False):
        st.dataframe(
            notifications.sort_values("ts", ascending=False),
            use_container_width=True,
        )
        csv_bytes = notifications.to_csv(index=False).encode("utf-8")
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (CSV)",
            data=csv_bytes,
            file_name="notifications.csv",
            mime="text/csv",
        )


def render_monitor(cards: List[MotorCard], notifications: pd.DataFrame) -> None:
    st.title("–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    header_cols = st.columns([3, 1])
    with header_cols[0]:
        st.subheader("–¶–µ—Ö 1")
    with header_cols[1]:
        st.caption(datetime.now().strftime("%d.%m.%Y %H:%M:%S"))

    expand_block = st.toggle("–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–ª–æ–∫", value=True, key="monitor_expand")
    if not expand_block:
        _render_notifications_bar(notifications)
        return

    cards_html = ["<div class='mon-grid'>"]
    for card in cards:
        status_class = card.status if card.status in ("alarm", "warn") else "ok"
        badge_html = "<span class='mon-badge'>–∏–Ω—Ñ–æ –ø–æ –ø–æ–∑–∏—Ü–∏–∏</span>"
        viols = _violations_html(card)
        equip_html = html.escape(card.equip_name)
        shop_html = html.escape(card.shop)
        card_id_html = html.escape(card.id)
        advice_html = html.escape(_advice_text(card.status)).replace("\n", "<br>")
        card_html = "".join(
            [
                f"<div class='mon-card {status_class}'>",
                "<div class='mon-card-head'>",
                f"<span class='mon-card-title'>{card_id_html}</span>",
                badge_html,
                "</div>",
                f"<div class='mon-card-equip'>{equip_html}</div>",
                f"<div class='mon-card-shop'>{shop_html}</div>",
                f"<div class='mon-card-viol'>–ù–∞—Ä—É—à–µ–Ω–∏—è:<br>{viols}</div>",
                "<div class='mon-card-caption'>–¢–°: –ø–æ–¥-–ø–æ—Ä–æ–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è</div>",
                f"<details class='mon-ai-holder'><summary>‚ùì –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫</summary><div>{advice_html}</div></details>",
                "</div>",
            ]
        )
        cards_html.append(card_html)
    cards_html.append("</div>")
    st.markdown("".join(cards_html), unsafe_allow_html=True)

    _render_notifications_bar(notifications)


# --- PAGES --- —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã, –¥–ª—è –≤–∏–¥–µ–æ - —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–µ
page = st.sidebar.radio(
    "–†–∞–∑–¥–µ–ª—ã",
    [
        "–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞",
        "–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –°–≤–æ–¥–∫–∞",
        "–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª–æ–º–æ–∫",
        "–ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (MVP)",
    ],
)

if page.startswith("–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä –¥–∏—Å–ø–µ—Ç"):
    with st.sidebar:
        st.subheader("–ú–æ–Ω–∏—Ç–æ—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
        calc_live = st.checkbox(
            "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ CSV (–º–µ–¥–ª–µ–Ω–Ω–æ)",
            value=False,
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –¥–ª—è CSV –≤ data/raw/ –∑–∞–ø—É—Å—Ç–∏–º –±—ã—Å—Ç—Ä—É—é –æ—Ü–µ–Ω–∫—É –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.",
        )
        file_limit = st.number_input(
            "–õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤",
            min_value=1,
            max_value=48,
            value=12,
            step=1,
            help="–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ CSV –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.",
            disabled=not calc_live,
        )
        autorefresh = st.checkbox(
            "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å)",
            value=True,
            help="–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.",
        )
        st.caption("–ë–µ–∑ –º–æ–¥–µ–ª–µ–π –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫.")

    if autorefresh:
        st_autorefresh(interval=30000, key="monitor_refresh")

    cards = fetch_monitor_data(calc_live=calc_live, file_limit=int(file_limit))
    notifications = build_notifications_from_cards(cards)
    render_monitor(cards, notifications)

elif page.startswith("–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –°–≤–æ–¥–∫–∞"):

    st.title("–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –°–≤–æ–¥–∫–∞")
    st.caption("KPI, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–≤–∏–≥–∞—Ç–µ–ª—é")

    import glob, os, numpy as np, pandas as pd
    from features import read_csv_3phase, decimate

    FS_RAW = 25600

    files = sorted(glob.glob("data/raw/*.csv"))
    if not files:
        st.warning("–ü–æ–ª–æ–∂–∏—Ç–µ CSV –≤ –ø–∞–ø–∫—É data/raw/ –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        st.stop()

    # --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞ (–¥–ª—è —Å–≤–æ–¥–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤) ---
    colp = st.columns(3)
    with colp[0]:
        fs_out = st.select_slider("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ì—Ü)", options=[2000, 3200, 5120], value=3200)
    with colp[1]:
        win_sec = st.select_slider("–û–∫–Ω–æ, —Å–µ–∫", options=[0.5, 1.0, 2.0], value=1.0)
    with colp[2]:
        thresh_warn = st.slider("–ü–æ—Ä–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (severity / p)", 0, 100, 80, step=5)


    # --- —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º (–∫—ç—à–∏—Ä—É–µ–º) ---
    @st.cache_data(show_spinner=True)
    def summarize(files, fs_out, win_sec, warn_thr):
        try:
            from inference import predict_csv
        except Exception:
            return None  # –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫–∏

        alarms = 0
        warns = 0
        per_source = np.zeros(6, dtype=float)  # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        per_device = {}  # –∞–≥—Ä–µ–≥–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º

        for f in files:
            try:
                preds = predict_csv(f, fs_out=fs_out, win_sec=win_sec, overlap=0.0)
                df = pd.DataFrame(preds)
            except Exception:
                continue

            # –∫—Ä–∏—Ç–µ—Ä–∏–∏
            is_alarm = (df["severity"] >= 80) | (df["p_fault"] >= 0.8)
            is_warn = (df["severity"] >= warn_thr) | (df["p_fault"] >= (warn_thr / 100.0))

            alarms += int(is_alarm.sum())
            warns += int(is_warn.sum())

            # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (–ø–æ –æ–∫–Ω–∞–º, –≥–¥–µ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
            if "proba" in df.columns:
                probs = np.array(df.loc[is_warn, "proba"].tolist()) if is_warn.any() else np.empty((0, 6))
                if probs.size:
                    per_source += probs.mean(axis=0)  # –º—è–≥–∫–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ

            per_device[os.path.basename(f)] = dict(
                alarms=int(is_alarm.sum()),
                warns=int(is_warn.sum()),
                severity_mean=float(df["severity"].mean() if "severity" in df else 0.0),
                p_fault_mean=float(df["p_fault"].mean() if "p_fault" in df else 0.0),
            )

        return dict(alarms=alarms, warns=warns, per_source=per_source, per_device=per_device)


    # —Å—Ç–∞–ª–æ
    calc_kpi = st.toggle(
        "–ü–æ—Å—á–∏—Ç–∞—Ç—å KPI –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º",
        value=False,
        help="–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å predict_csv –ø–æ –≤—Å–µ–º CSV (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ). –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∂–µ–º –∑–∞–≥–ª—É—à–∫–∏."
    )
    summary = summarize(files, fs_out, win_sec, thresh_warn) if calc_kpi else None

    # --- KPI (–∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–µ—Ç) ---
    c1, c2, c3, c4 = st.columns(4)
    if summary is None:
        # –Ω–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        c1.metric("–ê–ª–∞—Ä–º—ã (severity‚â•80 / p‚â•0.8)", "8")
        c2.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚â•" + str(thresh_warn) + ")", "4")
        # ¬´–∏–∑ 1–° –¢–û–ò–†¬ª ‚Äî –∑–∞–≥–ª—É—à–∫–∞
        repairs = st.session_state.get("repair_count", 3)
        c3.metric("–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–º–æ–Ω—Ç–µ (1–° –¢–û–ò–†)", repairs)
        c4.metric("–î–≤–∏–≥–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ", len(files))
    else:
        c1.metric("–ê–ª–∞—Ä–º—ã (severity‚â•80 / p‚â•0.8)", f"{summary['alarms']}")
        c2.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚â•" + str(thresh_warn) + ")", f"{summary['warns']}")
        # ¬´–∏–∑ 1–° –¢–û–ò–†¬ª ‚Äî —Å–µ–π—á–∞—Å –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∑–∂–µ —Å—é–¥–∞ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
        repairs = st.session_state.get("repair_count", 3)
        c3.metric("–£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ä–µ–º–æ–Ω—Ç–µ (1–° –¢–û–ò–†)", repairs)
        c4.metric("–î–≤–∏–≥–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ", len(files))

        # –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ –æ–∫–Ω–∞–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)")
        labels = ["bearing_outer", "bearing_inner", "rolling", "cage", "imbalance", "misalignment"]
        vals = summary["per_source"]
        if vals.sum() > 0:
            pie_df = pd.DataFrame({"source": labels, "value": vals / (vals.sum() + 1e-9)})
            fig_pie = px.pie(pie_df, names="source", values="value", hole=0.45)
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.caption("–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ‚Üí —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ.")

    st.divider()

    # --- –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—ã—Ä–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–≤–∏–≥–∞—Ç–µ–ª—é ---
    st.subheader("–°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Ñ—Ä–∞–≥–º–µ–Ω—Ç) –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–≤–∏–≥–∞—Ç–µ–ª—é")
    import numpy as np

    device_file = st.selectbox("–î–≤–∏–≥–∞—Ç–µ–ª—å (CSV)", files, index=0, format_func=lambda p: os.path.basename(p))
    show_sec = st.slider("–î–ª–∏–Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ (—Å–µ–∫)", 5, 30, 10)

    x = read_csv_3phase(device_file)
    factor = max(1, FS_RAW // fs_out)
    if factor > 1:
        x = decimate(x, factor)
    fs = FS_RAW // factor
    n = len(x);
    dur = n / fs

    # –ø–æ–∑–∏—Ü–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    pos = st.slider("–ü–æ–∑–∏—Ü–∏—è –Ω–∞—á–∞–ª–∞ (—Å–µ–∫)", 0.0, max(0.0, dur - show_sec), 0.0, 0.5)
    i0 = int(pos * fs);
    i1 = min(i0 + int(show_sec * fs), n)
    frag = x[i0:i1]

    # downsample –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    max_points = 8000
    step = max(1, (i1 - i0) // max_points)
    t = np.arange(i0, i1, step) / fs
    frag_ds = frag[::step]

    fig = go.Figure()
    for i, name in enumerate(["A", "B", "C"]):
        fig.add_trace(go.Scattergl(x=t, y=frag_ds[:, i], mode="lines", name=name, line=dict(width=1)))
    fig.update_layout(height=320, xaxis_title="–í—Ä–µ–º—è, —Å", yaxis_title="–¢–æ–∫, A",
                      legend=dict(orientation="h", y=1.02, x=1, xanchor="right"))
    st.plotly_chart(fig, use_container_width=True)


elif page.startswith("–ò–ò–º–ø—É–ª—å—Å (–ì–ª–∞–≤–Ω–∞—è)"):
    st.title("–ò–ò–º–ø—É–ª—å—Å ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    st.write("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–Ω–∞–ª–∏–∑–∞–º, KPI –º–æ–¥–µ–ª–∏ –∏ —Ç—Ä–µ–Ω–¥—ã.")
    st.info("–î–ª—è —Ç–µ—Å—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ¬´–ê–Ω–∞–ª–∏–∑ CSV¬ª, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑.")
elif page.startswith("–û–±–∑–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞"):
    st.title("–û–±–∑–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ (38 —Ñ–∞–π–ª–æ–≤)")
    st.caption("–õ–∏—Å—Ç–∞–µ–º 38 CSV: –≤—Ä–µ–º—è-—Ä—è–¥, —Å–ø–µ–∫—Ç—Ä, PSD, —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ –∏ –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–∫–æ–Ω")

elif page.startswith("–ò–ò-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
    # ===== –ó–ê–ì–û–õ–û–í–û–ö =====
    st.title("üîÆ –ò–ò-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ CSV (MVP)")
    st.caption(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (3 –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–∫–∞ A,B,C) ‚Äî –ø–æ–ª—É—á–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞, —Ç–∏–ø, —Ç—è–∂–µ—Å—Ç—å –∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Ç—Ä–µ–≤–æ–≥–∏ (TTF).")

    import os, sys, io
    import numpy as np
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go

    sys.path.append(os.path.dirname(__file__))
    from inference_v2 import load_predictor


    # ===== –ú–û–î–ï–õ–¨ (–∫—ç—à —Ä–µ—Å—É—Ä—Å–∞) =====
    @st.cache_resource(show_spinner=False)
    def _load_predictor():
        return load_predictor(model_dir="models")


    predictor = _load_predictor()

    # ===== –°–ê–ô–î–ë–ê–†: –ù–ê–°–¢–†–û–ô–ö–ò =====
    with st.sidebar:
        st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ (MVP)")
        fs_out = st.select_slider("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ì—Ü", [2000, 3200, 5120], value=3200)
        win_sec = st.select_slider("–û–∫–Ω–æ, —Å–µ–∫", [0.5, 1.0, 2.0], value=1.0)
        overlap = st.select_slider("–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ", [0.0, 0.25, 0.5], value=0.0)
        st.divider()
        with st.expander("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥—à–∏–ø–Ω–∏–∫–∞ / RPM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", expanded=False):
            rpm = st.number_input("RPM", 500, 6000, 1770, step=10)
            Z = st.number_input("Z (—á–∏—Å–ª–æ —Ç–µ–ª –∫–∞—á–µ–Ω–∏—è)", 3, 20, 9, step=1)
            dmm = st.number_input("d, –º–º (—à–∞—Ä–∏–∫/—Ä–æ–ª–∏–∫)", value=7.94, step=0.01, format="%.2f")
            Dmm = st.number_input("D, –º–º (–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è)", value=38.5, step=0.1, format="%.1f")
            theta = st.number_input("–£–≥–æ–ª –∫–æ–Ω—Ç–∞–∫—Ç–∞, ¬∞", value=0, step=1)
        st.caption(f"–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏–∑ –º–æ–¥–µ–ª–∏: **{predictor.info.get('bin_threshold', 0.5):.3f}**")

    # ===== –§–ê–ô–õ =====
    st.subheader("–î–∞–Ω–Ω—ã–µ")

    # —Ö—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–º–æ-–ø—É—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞–º–∏
    st.session_state.setdefault("demo_path", None)

    c_up, c_demo = st.columns([4, 1])
    with c_up:
        up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Å —Ç—Ä–µ–º—è –∫–æ–ª–æ–Ω–∫–∞–º–∏ (A,B,C)", type=["csv"])
    with c_demo:
        demo_clicked = st.button("üéØ –î–ï–ú–û-–ó–ê–ì–†–£–ó–ö–ê", help="–ü–æ–¥–≥—Ä—É–∑–∏—Ç data/raw/current_1.csv (–∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π 1.csv)")

    data_bytes = None
    uploaded_name = None

    if up is not None:
        # –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        data_bytes = up.read()
        uploaded_name = up.name
        st.session_state["demo_path"] = None  # –µ—Å–ª–∏ –±—ã–ª –¥–µ–º–æ-—Ä–µ–∂–∏–º ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
    else:
        # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ–º–æ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Ä–∞–Ω–µ–µ ‚Äî –±–µ—Ä—ë–º –¥–µ–º–æ-—Ñ–∞–π–ª
        if demo_clicked or st.session_state.get("demo_path"):
            import os

            demo_path = st.session_state.get("demo_path")
            if not demo_path:
                # –∏—â–µ–º 1.csv –≤ —Ç–∏–ø–æ–≤—ã—Ö –º–µ—Å—Ç–∞—Ö
                for p in ["data/raw/current_1.csv", "data/demo/current_1.csv", "data/current_1.csv", "current_1.csv"]:
                    if os.path.exists(p):
                        demo_path = p
                        st.session_state["demo_path"] = p
                        break
            if demo_path and os.path.exists(demo_path):
                with open(demo_path, "rb") as f:
                    data_bytes = f.read()
                uploaded_name = os.path.basename(demo_path)
                st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ñ–∞–π–ª: **{uploaded_name}**")
            else:
                st.error("–î–µ–º–æ-—Ñ–∞–π–ª **1.csv** –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–æ–∂–∏—Ç–µ –µ–≥–æ –≤ `data/raw/` (–∏–ª–∏ `data/demo/`, `data/`).")
                st.stop()

    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ ‚Äî –∂–¥—ë–º —Ñ–∞–π–ª/–∫–Ω–æ–ø–∫—É
    if data_bytes is None:
        st.stop()

    # ===== –ò–ù–§–ï–†–ï–ù–° =====
    try:
        with st.spinner("–°—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è‚Ä¶"):
            df_pred, agg = predictor.predict_csv(
                io.BytesIO(data_bytes),
                fs_raw=25600, fs_out=fs_out,
                win_sec=win_sec, overlap=overlap,
                rpm=float(locals().get("rpm", 1770)),
                Z=int(locals().get("Z", 9)),
                dmm=float(locals().get("dmm", 7.94)),
                Dmm=float(locals().get("Dmm", 38.5)),
                theta=int(locals().get("theta", 0))
            )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
        st.stop()

    # ===== –†–£–° –ò–ú–ï–ù–ê –ö–õ–ê–°–°–û–í =====
    ru7 = {
        "normal": "–Ω–æ—Ä–º–∞",
        "BPFO": "–ø–æ–¥—à. –Ω–∞—Ä—É–∂–Ω–æ–µ –∫–æ–ª—å—Ü–æ",
        "BPFI": "–ø–æ–¥—à. –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ",
        "BSF": "–¥–µ—Ñ–µ–∫—Ç —Ç–µ–ª –∫–∞—á–µ–Ω–∏—è",
        "FTF": "—Å–µ–ø–∞—Ä–∞—Ç–æ—Ä",
        "imbalance": "–¥–∏—Å–±–∞–ª–∞–Ω—Å",
        "misalignment": "—Ä–∞—Å—Ü–µ–Ω—Ç—Ä–æ–≤–∫–∞",
    }
    ru3 = {
        "bearing": "–ø–æ–¥—à–∏–ø–Ω–∏–∫",
        "rotor": "—Ä–æ—Ç–æ—Ä",
        "stator": "—Å—Ç–∞—Ç–æ—Ä",
        "other": "–ø—Ä–æ—á–µ–µ",
        "none": "–Ω–µ—Ç –¥–µ—Ñ–µ–∫—Ç–∞",
        "unknown": "‚Äî",
    }
    label7 = predictor.labels7 if hasattr(predictor, "labels7") else list(ru7.keys())

    # ===== KPI / –í–ï–†–î–ò–ö–¢ =====
    thr = agg["thr_bin"]
    verdict_defect = (agg["p_def_mean"] >= thr) or (agg["p_def_share_over_thr"] >= 0.2)
    verdict_text = "–î–ï–§–ï–ö–¢" if verdict_defect else "–ù–æ—Ä–º–∞"
    emoji = "üö®" if verdict_defect else "‚úÖ"

    # –ë–∞–Ω–Ω–µ—Ä (–∫—Ä—É–ø–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä)
    if verdict_defect:
        st.markdown(f"""
        <div class="big-banner danger">
          <div style="font-size:28px;line-height:1.0">üî¥</div>
          <div>
            <p class="title">{emoji} –í–ù–ò–ú–ê–ù–ò–ï! –û–ë–ù–ê–†–£–ñ–ï–ù –î–ï–§–ï–ö–¢</p>
            <p class="subtitle">–°–∏—Å—Ç–µ–º–∞ –≤—ã—è–≤–∏–ª–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É. –ü–†–û–í–ï–†–¨–¢–ï –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–¥—ã –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –Ω–∏–∂–µ.</p>
          </div>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="big-banner ok">
          <div style="font-size:28px;line-height:1.0">üü¢</div>
          <div>
            <p class="title">{emoji} –ù–æ—Ä–º–∞ ‚Äî –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>
            <p class="subtitle">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞. –î–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç—Ä–µ–Ω–¥—ã –∏ —Ç–∞–±–ª–∏—Ü—É ¬´–æ–∫–Ω–∞ —Ä–∏—Å–∫–∞¬ª.</p>
          </div>
        </div>
        """, unsafe_allow_html=True)

    # –ß–∏–ø—ã –∫–ª–∞—Å—Å–æ–≤ —Ñ–∞–π–ª–∞
    file_class7_ru = ru7.get(agg["file_class7"], agg["file_class7"])
    file_class3_ru = ru3.get(agg["file_class3"], agg["file_class3"])
    st.markdown(
        f'<span class="badge">–ö–ª–∞—Å—Å —Ñ–∞–π–ª–∞ (7): <b>{file_class7_ru}</b></span>'
        f'<span class="badge">–ö–ª–∞—Å—Å —Ñ–∞–π–ª–∞ (3): <b>{file_class3_ru}</b></span>',
        unsafe_allow_html=True
    )

    # –°–µ—Ç–∫–∞ KPI (—É–ø—Ä–æ—Å—Ç–∏–ª–∏: –±–µ–∑ ¬´–û–∫–æ–Ω –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞¬ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞–∫—Å–∏–º—É–º —Ç—è–∂–µ—Å—Ç–∏)
    p_mean = agg['p_def_mean']
    ttf = "‚àû" if np.isinf(agg["ttf_to_80_sec"]) else f"{agg['ttf_to_80_sec']:.0f} —Å"
    sev_max = agg['severity_max']

    kpi_html = f"""
        <div class="kpi-grid">
          <div class="kpi"><div class="label">–í–µ—Ä–¥–∏–∫—Ç</div>
               <div class="value">{'üî¥ –î–ï–§–ï–ö–¢' if verdict_defect else 'üü¢ –ù–û–†–ú–ê'}</div></div>
          <div class="kpi"><div class="label">–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞</div>
               <div class="value">{p_mean:.2f}</div></div>
          <div class="kpi"><div class="label">–í—Ä–µ–º—è –¥–æ –æ—Ç–∫–∞–∑–∞</div>
               <div class="value">{ttf}</div></div>
        </div>
        <div class="kpi-grid" style="grid-template-columns:repeat(2,minmax(0,1fr))">
          <div class="kpi"><div class="label">–ö–ª–∞—Å—Å –¥–µ—Ñ–µ–∫—Ç–∞</div>
               <div class="value">{file_class7_ru}</div></div>
          <div class="kpi"><div class="label">–ü—Ä–∏—á–∏–Ω–∞ –¥–µ—Ñ–µ–∫—Ç–∞</div>
               <div class="value">{file_class3_ru}</div></div>
        </div>
        """
    st.markdown(kpi_html, unsafe_allow_html=True)

    # –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ ¬´–¢—è–∂–µ—Å—Ç–∏¬ª
    # st.caption("¬´–¢—è–∂–µ—Å—Ç—å (Severity)¬ª ‚Äî —à–∫–∞–ª–∞ 0‚Äì100: 0‚Äì49 ‚Äî –Ω–æ—Ä–º–∞, 50‚Äì79 ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, ‚â•80 ‚Äî —Ç—Ä–µ–≤–æ–≥–∞. "
    # "–ù–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–∫–∞–∑–∞–Ω –º–∞–∫—Å–∏–º—É–º –ø–æ —Ñ–∞–π–ª—É; –ø–æ–¥—Ä–æ–±–Ω–∞—è –∫—Ä–∏–≤–∞—è ‚Äî –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–ì—Ä–∞—Ñ–∏–∫–∏¬ª.")
    st.divider()

    # ===== –í–ö–õ–ê–î–ö–ò: –ì—Ä–∞—Ñ–∏–∫–∏ / –¢–∞–±–ª–∏—Ü–∞ / –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ =====
    tab_g, tab_t, tab_p = st.tabs(["–ì—Ä–∞—Ñ–∏–∫–∏", "–û–∫–Ω–∞ —Ä–∏—Å–∫–∞", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤"])

    with tab_g:
        c1, c2 = st.columns(2, gap="large")

        with c1:
            st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            fig1 = go.Figure()
            fig1.add_trace(go.Scatter(x=df_pred["t1"], y=df_pred["p_def"], mode="lines", name="p(defect)"))
            fig1.add_hline(y=thr, line_dash="dot", annotation_text="–ø–æ—Ä–æ–≥", annotation_position="top left")
            fig1.update_layout(height=300, xaxis_title="–í—Ä–µ–º—è, —Å", yaxis_title="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            st.plotly_chart(fig1, use_container_width=True)

        with c2:
            st.subheader("–¢—è–∂–µ—Å—Ç—å (0‚Äì100) –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
            fig2 = go.Figure()
            fig2.add_trace(go.Scatter(x=df_pred["t1"], y=df_pred["severity"], mode="lines", name="severity"))
            fig2.add_hline(y=50, line_dash="dot", annotation_text="warning")
            fig2.add_hline(y=80, line_dash="dot", annotation_text="alarm")
            fig2.update_layout(height=300, xaxis_title="–í—Ä–µ–º—è, —Å", yaxis_title="–¢—è–∂–µ—Å—Ç—å")
            st.plotly_chart(fig2, use_container_width=True)

    with tab_t:
        st.subheader("–¢–æ–ø-25 –æ–∫–æ–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∏—Å–∫–æ–º")
        top = df_pred.sort_values(["p_def", "severity"], ascending=False).head(25)[
            ["t0", "t1", "p_def", "y_pred", "severity"]]
        st.dataframe(top, use_container_width=True, height=360)
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –æ–∫–Ω–∞–º (CSV)",
            df_pred.to_csv(index=False).encode("utf-8"),
            file_name=f"report_{uploaded_name or 'demo.csv'}",
            mime="text/csv"
        )

    with tab_p:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ —Ñ–∞–π–ª—É)")
        labels7 = label7
        p7 = np.array(agg["file_p7"])
        # —Ä—É—Å—Å–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
        labels7_ru = [ru7.get(x, x) for x in labels7]
        df_p7 = pd.DataFrame({"–ö–ª–∞—Å—Å": labels7_ru, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": p7})
        fig_p7 = px.bar(df_p7, x="–ö–ª–∞—Å—Å", y="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", text="–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
        fig_p7.update_traces(texttemplate="%{text:.2f}", textposition="outside")
        fig_p7.update_layout(height=320, yaxis_range=[0, 1], margin=dict(t=20))
        st.plotly_chart(fig_p7, use_container_width=True)

elif ("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª–æ–º–æ–∫" in page):
    st.title("–ò–ò–º–ø—É–ª—å—Å ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª–æ–º–æ–∫")
    st.caption("–ó–∞–≥—Ä—É–∑–∏ –∂—É—Ä–Ω–∞–ª –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–π –Ω–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö. –§–∏–ª—å—Ç—Ä—ã ‚Äî —Å–ª–µ–≤–∞.")

    import io, math, re, random
    from datetime import datetime, timedelta
    import pandas as pd
    import numpy as np
    import plotly.express as px
    import plotly.graph_objects as go

    # ---- –º–∏–Ω–∏-—Å—Ç–∏–ª–∏ –¥–ª—è KPI/–±–∞–Ω–Ω–µ—Ä–æ–≤ ----
    st.markdown("""
    <style>
      .kpi-grid{display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:12px;margin:8px 0 16px}
      .kpi{padding:14px 16px;border-radius:12px;background:#F8FAFC;border:1px solid #EFF2F6}
      .kpi .label{font-size:12px;color:#64748B;text-transform:uppercase;letter-spacing:.02em}
      .kpi .value{font-size:24px;font-weight:800;margin-top:4px}
      .kpi .sub{font-size:12px;color:#6B7280;margin-top:2px}
      .banner-money{padding:16px 18px;border-radius:14px;border:1px solid #FECACA;background:#FEE2E2;color:#7F1D1D;margin:4px 0 12px}
      .badge{display:inline-block;padding:6px 10px;border-radius:999px;background:#F3F4F6;font-weight:600;font-size:13px;margin-right:8px}
      @media (max-width:1100px){.kpi-grid{grid-template-columns:repeat(2,minmax(0,1fr))}}
    </style>
    """, unsafe_allow_html=True)

    REQUIRED_COLS = [
        "ID –∑–∞–ø–∏—Å–∏", "–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è", "–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫",
        "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π ‚Ññ / —Å–µ—Ä–∏–π–Ω—ã–π ‚Ññ", "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        "–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏", "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å", "–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞",
        "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", "–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏",
        "–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)", "–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è",
        "–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏", "–ü—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã",
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ–º–æ–Ω—Ç–∞", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    ]


    # ---------- helpers ----------
    def _to_bool(x):
        if isinstance(x, str): x = x.strip().lower()
        return x in (True, 1, "1", "true", "–¥–∞", "y", "yes", "–æ–∫", "–∏—Å—Ç–∏–Ω–∞")


    def _fmt_money(v, cur="‚ÇΩ"):
        try:
            return f"{int(round(float(v))):,}".replace(",", " ") + f" {cur}"
        except Exception:
            return "‚Äî"


    @st.cache_data(show_spinner=False)
    def load_uploaded(file):
        if file is None: return None
        try:
            return pd.read_csv(file) if file.name.lower().endswith(".csv") else pd.read_excel(file, engine="openpyxl")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None


    @st.cache_data(show_spinner=False)
    def make_demo(n_rows=1000, days=180, seed=42):
        random.seed(seed);
        np.random.seed(seed)
        today = datetime.now().date()
        shops = [f"–¶–µ—Ö {i}" for i in range(1, 9)]
        types = ["–¥–≤–∏–≥–∞—Ç–µ–ª—å", "—Å—Ç–∞–Ω–æ–∫", "–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä", "–Ω–∞—Å–æ—Å", "—Ä–µ–¥—É–∫—Ç–æ—Ä"]
        eqs = [f"–î–≤–∏–≥–∞—Ç–µ–ª—å-{i:03d}" for i in range(40, 120)]
        kinds = ["–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è", "–≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞", "–ü–û", "—Å–º–∞–∑–∫–∞"]
        reasons = ["–∏–∑–Ω–æ—Å", "–æ—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞", "–¥–µ—Ñ–µ–∫—Ç –¥–µ—Ç–∞–ª–∏", "–≤–∏–±—Ä–∞—Ü–∏—è", "–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ"]
        crits = ["–≤—ã—Å–æ–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–Ω–∏–∑–∫–∞—è"]
        statuses = ["–í —Ä–∞–±–æ—Ç–µ", "–û–∂–∏–¥–∞–µ—Ç –∑–∞–ø—á–∞—Å—Ç–µ–π", "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∞"]
        resp = ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ö—É–∑–Ω–µ—Ü–æ–≤"]
        execs = ["–ê–û –†–µ–º–æ–Ω—Ç–°–µ—Ä–≤–∏—Å", "–û–û–û –¢–µ—Ö–°–∞–ø–ø–æ—Ä—Ç", "–ò–ü –ú–µ—Ö–∞–Ω–∏–∫", "–¶–µ—Ö–æ–≤–∞—è –±—Ä–∏–≥–∞–¥–∞"]

        rows = []
        for i in range(n_rows):
            d0 = today - timedelta(days=int(np.random.beta(2, 6) * days))
            t0 = (datetime(2000, 1, 1, 8, 0) + timedelta(
                minutes=int(np.random.rand() * 600))).time() if np.random.rand() < 0.8 else None
            sh = random.choice(shops);
            tp = random.choice(types);
            eq = random.choice(eqs)
            kind = np.random.choice(kinds, p=[0.36, 0.32, 0.1, 0.12, 0.1])
            crit = np.random.choice(crits, p=[0.25, 0.5, 0.25])
            stt = np.random.choice(statuses, p=[0.25, 0.15, 0.60])
            created_dt = datetime.combine(d0, t0 or datetime.min.time()) + timedelta(hours=np.random.uniform(0, 6))
            plan_dt = created_dt + timedelta(hours=np.random.uniform(4, 72))
            closed = (stt == "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∞") and (np.random.rand() < 0.9)
            fix_dt = created_dt + timedelta(hours=np.random.uniform(2, 48)) if closed else pd.NaT
            downtime = float(np.round(np.random.uniform(0.5, 24), 2)) if closed else np.nan
            cost = float(np.round(np.exp(np.random.normal(6, 0.9)) / 100, 2)) if closed else np.nan
            rows.append({
                "ID –∑–∞–ø–∏—Å–∏": i + 1, "–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è": d0, "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è": t0, "–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫": sh,
                "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å": eq, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π ‚Ññ / —Å–µ—Ä–∏–π–Ω—ã–π ‚Ññ": f"INV-{10000 + i}",
                "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": tp, "–¢–∏–ø –ø–æ–ª–æ–º–∫–∏": kind, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏": f"–°–∏–º–ø—Ç–æ–º—ã {kind} –Ω–∞ {eq}",
                "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å": crit, "–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞": "–î–∞" if np.random.rand() < 0.85 else "–ù–µ—Ç",
                "–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏": f"REQ-{200000 + i}" if np.random.rand() < 0.85 else "",
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ": random.choice(resp),
                "–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏": created_dt, "–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)": plan_dt,
                "–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è": fix_dt, "–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è": downtime, "–°—Ç–∞—Ç—É—Å": stt,
                "–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏": np.random.choice(reasons, p=[0.35, 0.15, 0.15, 0.1, 0.15, 0.10]),
                "–ü—Ä–∏–Ω—è—Ç—ã–µ –º–µ—Ä—ã": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞/—Ä–µ–º–æ–Ω—Ç/–∑–∞–º–µ–Ω–∞", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–µ–º–æ–Ω—Ç–∞": random.choice(execs),
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π": cost, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": ""
            })
        return pd.DataFrame(rows)


    def normalize_df(df: pd.DataFrame) -> pd.DataFrame:
        missing = [c for c in REQUIRED_COLS if c not in df.columns]
        if missing: st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫: " + ", ".join(missing))
        df = df.copy()
        df["–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"] = pd.to_datetime(df["–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"], errors="coerce").dt.date
        if "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è" in df:
            df["–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"] = pd.to_datetime(df["–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"], errors="coerce").dt.time
        df["–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"] = pd.to_datetime(df["–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"], errors="coerce")
        df["–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"] = pd.to_datetime(df["–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"], errors="coerce")
        df["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"] = pd.to_datetime(df["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"], errors="coerce")
        df["–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞"] = df["–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞"].map(_to_bool)
        for col in ["–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π"]:
            df[col] = pd.to_numeric(df[col], errors="coerce")
        ts_detect = pd.to_datetime(df["–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"], errors="coerce")
        if "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è" in df and df["–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"].notna().any():
            ts_detect = pd.to_datetime(df["–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"].astype(str) + " " + df["–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"].astype(str),
                                       errors="coerce")
        df["__ts_detect"] = ts_detect
        mask_closed = df["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"].notna()
        delta = df.loc[mask_closed, "–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"] - df.loc[mask_closed, "__ts_detect"]
        df["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, —á"] = np.nan
        df.loc[mask_closed, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, —á"] = (delta.dt.total_seconds() / 3600.0).clip(lower=0)
        return df


    def apply_filters(df: pd.DataFrame) -> pd.DataFrame:
        with st.sidebar:
            st.subheader("–§–∏–ª—å—Ç—Ä—ã –∂—É—Ä–Ω–∞–ª–∞")
            min_d = pd.to_datetime(df["__ts_detect"]).min()
            max_d = pd.to_datetime(df["__ts_detect"]).max()
            d_from, d_to = st.date_input("–ü–µ—Ä–∏–æ–¥ (–î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)", (min_d.date(), max_d.date()))
            shop = st.multiselect("–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫", sorted(df["–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫"].dropna().unique().tolist()))
            tpe = st.multiselect("–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", sorted(df["–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"].dropna().unique().tolist()))
            equip = st.multiselect("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å",
                                   sorted(df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"].dropna().unique().tolist()))
            kind = st.multiselect("–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", sorted(df["–¢–∏–ø –ø–æ–ª–æ–º–∫–∏"].dropna().unique().tolist()))
            crit = st.multiselect("–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å", ["–≤—ã—Å–æ–∫–∞—è", "—Å—Ä–µ–¥–Ω—è—è", "–Ω–∏–∑–∫–∞—è"])
            stat = st.multiselect("–°—Ç–∞—Ç—É—Å", sorted(df["–°—Ç–∞—Ç—É—Å"].dropna().unique().tolist()))
            only_closed = st.checkbox("–¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã", value=False)
            q = st.text_input("–ü–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")

        m = (pd.to_datetime(df["__ts_detect"]).dt.date >= d_from) & (pd.to_datetime(df["__ts_detect"]).dt.date <= d_to)
        if shop: m &= df["–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫"].isin(shop)
        if tpe:  m &= df["–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"].isin(tpe)
        if equip: m &= df["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"].isin(equip)
        if kind: m &= df["–¢–∏–ø –ø–æ–ª–æ–º–∫–∏"].isin(kind)
        if crit: m &= df["–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å"].isin(crit)
        if stat: m &= df["–°—Ç–∞—Ç—É—Å"].isin(stat)
        if only_closed: m &= df["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"].notna()
        if q:
            ql = q.strip().lower()
            m &= (df["–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏"].astype(str).str.lower().str.contains(ql)) | \
                 (df["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"].astype(str).str.lower().str.contains(ql))
        return df[m].copy()


    def kpi_cards(df: pd.DataFrame):
        c1, c2, c3, c4 = st.columns(4)
        total = len(df)
        c1.metric("–ü–æ–ª–æ–º–æ–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥", f"{total}")
        mttr = df["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, —á"].dropna().mean()
        c2.metric("MTTR, —á", "‚Äî" if np.isnan(mttr) else f"{mttr:.1f}")
        mtbf_vals = []
        for eq, g in df.sort_values("__ts_detect").groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"):
            times = pd.to_datetime(g["__ts_detect"]).values
            if len(times) >= 2:
                diffs = np.diff(times).astype("timedelta64[h]").astype(float)
                if len(diffs) > 0: mtbf_vals.append(diffs.mean())
        mtbf = np.mean(mtbf_vals) if mtbf_vals else np.nan
        c3.metric("MTBF, —á", "‚Äî" if (not mtbf_vals or np.isnan(mtbf)) else f"{mtbf:.0f}")
        closed = df[df["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"].notna()].copy()
        if len(closed):
            ontime = (closed["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"] <= closed["–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"]).mean() * 100
            c4.metric("–î–æ–ª—è ¬´–≤ —Å—Ä–æ–∫¬ª, %", f"{ontime:.0f}")
        else:
            c4.metric("–î–æ–ª—è ¬´–≤ —Å—Ä–æ–∫¬ª, %", "‚Äî")
        st.caption(
            "MTTR ‚Äî —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º. MTBF ‚Äî —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–∫–∞–∑–∞–º–∏ (–ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é —Å ‚â•2 —Å–æ–±—ã—Ç–∏—è–º–∏).")


    # ---------- –∑–∞–≥—Ä—É–∑–∫–∞/–¥–µ–º–æ ----------
    with st.sidebar:
        st.subheader("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        upl = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∂—É—Ä–Ω–∞–ª (CSV/XLSX)", type=["csv", "xlsx"], key="toir_upload")
    df_raw = load_uploaded(upl)
    if df_raw is None: df_raw = make_demo()
    df = normalize_df(df_raw)

    # ---------- —Ñ–∏–ª—å—Ç—Ä—ã + KPI ----------
    dff = apply_filters(df)
    kpi_cards(dff)

    # ---------- –≤–∫–ª–∞–¥–∫–∏ ----------
    tab_money, tab0, tab1, tab2, tab3, tab_fin, tab5 = st.tabs(
        ["–î–µ–Ω—å–≥–∏ (C-Level)", "–û–±—â–µ–µ", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–¢–∏–ø—ã –ø–æ–ª–æ–º–æ–∫", "–°—Ä–æ–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–§–∏–Ω–∞–Ω—Å—ã (–¥–µ—Ç–∞–ª—å–Ω–æ)",
         "–ü—Ä–æ–≥–Ω–æ–∑"]
    )

    # ======== –í–ö–õ–ê–î–ö–ê –î–õ–Ø –¢–û–ü-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê ========
    with tab_money:
        st.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ—Ä—å")
        c_rate, c_cur = st.columns([2, 1])
        with c_rate:
            cost_per_hour = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞ –ø—Ä–æ—Å—Ç–æ—è, ‚ÇΩ/—á–∞—Å", min_value=0, value=120_000, step=5_000,
                                            help="–û—Ü–µ–Ω–∫–∞ –ø–æ—Ç–µ—Ä—å –≤—ã—Ä—É—á–∫–∏/–º–∞—Ä–∂–∏ –≤ —á–∞—Å –ø—Ä–æ—Å—Ç–æ—è –ª–∏–Ω–∏–∏/–∞–≥—Ä–µ–≥–∞—Ç–∞.")
        with c_cur:
            currency = st.selectbox("–í–∞–ª—é—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", ["‚ÇΩ", "‚Ç∏", "‚Ç¥", "$", "‚Ç¨"], index=0)

        # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        money = dff.copy()
        money["__downtime_h"] = pd.to_numeric(money["–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"], errors="coerce").fillna(0.0)
        money["__repair_cost"] = pd.to_numeric(money["–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π"], errors="coerce").fillna(0.0)
        money["__downtime_cost"] = money["__downtime_h"] * float(cost_per_hour)
        money["__loss_total"] = money["__downtime_cost"] + money["__repair_cost"]

        total_downtime_h = float(money["__downtime_h"].sum())
        downtime_cost = float(money["__downtime_cost"].sum())
        repair_cost = float(money["__repair_cost"].sum())
        total_loss = float(money["__loss_total"].sum())

        # –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
        if len(money):
            period_days = (pd.to_datetime(money["__ts_detect"]).max() - pd.to_datetime(
                money["__ts_detect"]).min()).days + 1
        else:
            period_days = 30
        months = max(1.0, period_days / 30.44)

        # –±–æ–ª—å—à–æ–π –±–∞–Ω–Ω–µ—Ä
        st.markdown(
            f'<div class="banner-money">üí∏ <b>–ü–æ—Ç–µ—Ä–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:</b> {_fmt_money(total_loss, currency)} '
            f'‚Ä¢ –ø—Ä–æ—Å—Ç–æ–π: {_fmt_money(downtime_cost, currency)} ‚Ä¢ —Ä–µ–º–æ–Ω—Ç/–∑–∞–ø—á–∞—Å—Ç–∏: {_fmt_money(repair_cost, currency)}</div>',
            unsafe_allow_html=True
        )

        # KPI
        k1, k2, k3, k4 = st.columns(4)
        k1.markdown(f"""<div class="kpi"><div class="label">–°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π</div>
                        <div class="value">{total_downtime_h:.0f} —á</div><div class="sub">—Å—Ä–µ–¥–Ω–∏–π –Ω–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç ‚Äî {money["__downtime_h"].replace(0, np.nan).mean():.1f} —á</div></div>""",
                    unsafe_allow_html=True)
        k2.markdown(f"""<div class="kpi"><div class="label">–ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ—è</div>
                        <div class="value">{_fmt_money(downtime_cost, currency)}</div><div class="sub">{int(round(cost_per_hour)):,} ‚ÇΩ/—á–∞—Å</div></div>""".replace(
            ",", " "), unsafe_allow_html=True)
        k3.markdown(f"""<div class="kpi"><div class="label">–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–µ–º–æ–Ω—Ç/–∑–∞–ø—á–∞—Å—Ç–∏</div>
                        <div class="value">{_fmt_money(repair_cost, currency)}</div></div>""", unsafe_allow_html=True)
        k4.markdown(f"""<div class="kpi"><div class="label">–ò—Ç–æ–≥–æ –ø—Ä—è–º—ã–µ –ø–æ—Ç–µ—Ä–∏</div>
                        <div class="value">{_fmt_money(total_loss, currency)}</div><div class="sub">–ø–µ—Ä–∏–æ–¥ ‚âà {months:.1f} –º–µ—Å.</div></div>""",
                    unsafe_allow_html=True)

        st.divider()

        # –°—Ü–µ–Ω–∞—Ä–∏–∏ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ ROI
        st.subheader("–°—Ü–µ–Ω–∞—Ä–∏–π —ç–∫–æ–Ω–æ–º–∏–∏ –∏ ROI")
        s1, s2, s3, s4 = st.columns([1, 1, 1, 1])
        with s1:
            mttr_red = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ MTTR, %", 0, 30, 10, help="–í–ª–∏—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ—Å—Ç–æ—è.")
        with s2:
            fail_red = st.slider("–°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–∞–∑–æ–≤, %", 0, 30, 15, help="–í–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∏ —Ä–µ–º–æ–Ω—Ç.")
        with s3:
            proj_cost = st.number_input("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, ‚ÇΩ", min_value=0, value=5_000_000, step=250_000)
        with s4:
            st.caption("–ü–æ—è—Å–Ω–µ–Ω–∏–µ: –Ω–æ–≤–∞—è –±–∞–∑–æ–≤–∞—è –ª–∏–Ω–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–ª—è —Ç–æ–≥–æ –∂–µ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.")

        mttr_k = 1 - mttr_red / 100.0
        fail_k = 1 - fail_red / 100.0
        new_downtime_cost = downtime_cost * mttr_k * fail_k
        new_repair_cost = repair_cost * fail_k
        new_total_loss = new_downtime_cost + new_repair_cost
        savings_abs = total_loss - new_total_loss
        monthly_saving = savings_abs / months if months else savings_abs
        payback_months = (proj_cost / monthly_saving) if monthly_saving > 0 else np.inf
        roi = ((savings_abs - proj_cost) / proj_cost * 100.0) if proj_cost > 0 else np.nan

        cA, cB, cC, cD = st.columns(4)
        cA.markdown(f"""<div class="kpi"><div class="label">–≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é</div>
                        <div class="value">{_fmt_money(savings_abs, currency)}</div><div class="sub">–≤ –º–µ—Å.: {_fmt_money(monthly_saving, currency)}</div></div>""",
                    unsafe_allow_html=True)
        cB.markdown(f"""<div class="kpi"><div class="label">–ù–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏</div>
                        <div class="value">{_fmt_money(new_total_loss, currency)}</div><div class="sub">–ø—Ä–æ—Å—Ç–æ–π {_fmt_money(new_downtime_cost, currency)} ‚Ä¢ —Ä–µ–º–æ–Ω—Ç {_fmt_money(new_repair_cost, currency)}</div></div>""",
                    unsafe_allow_html=True)
        cC.markdown(f"""<div class="kpi"><div class="label">ROI</div>
                        <div class="value">{'‚Äî' if np.isnan(roi) else f'{roi:.0f}%'} </div><div class="sub">–ø—Ä–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ {_fmt_money(proj_cost, currency)}</div></div>""",
                    unsafe_allow_html=True)
        cD.markdown(f"""<div class="kpi"><div class="label">–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å</div>
                        <div class="value">{'‚àû' if np.isinf(payback_months) else f'{payback_months:.1f} –º–µ—Å.'}</div><div class="sub">—Ä–∞—Å—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É</div></div>""",
                    unsafe_allow_html=True)

        st.divider()

        # Pareto –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        st.subheader("Pareto 80/20: –≥–¥–µ —Ç–µ—Ä—è–µ–º –¥–µ–Ω—å–≥–∏ (–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)")
        loss_by_eq = money.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å")["__loss_total"].sum().sort_values(ascending=False)
        top_eq = loss_by_eq.head(15)
        if len(top_eq):
            cum = (top_eq.cumsum() / top_eq.sum() * 100).round(1)
            fig = go.Figure()
            fig.add_bar(x=top_eq.index, y=top_eq.values, name="–ü–æ—Ç–µ—Ä–∏")
            fig.add_scatter(x=top_eq.index, y=cum.values, name="–ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π %", yaxis="y2", mode="lines+markers")
            fig.update_layout(height=360, xaxis_title="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", yaxis_title=f"–ü–æ—Ç–µ—Ä–∏, {currency}",
                              yaxis2=dict(title="% –∫ –∏—Ç–æ–≥—É", overlaying="y", side="right", range=[0, 100]))
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Pareto.")

        # –í–æ–¥–æ–ø–∞–¥: –∏–∑ —á–µ–≥–æ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –ø–æ—Ç–µ—Ä–∏
        st.subheader("–í–∫–ª–∞–¥ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –≤ –ø–æ—Ç–µ—Ä–∏ (–≤–æ–¥–æ–ø–∞–¥)")
        figw = go.Figure(go.Waterfall(
            name="–ü–æ—Ç–µ—Ä–∏",
            orientation="v",
            measure=["relative", "relative", "total"],
            x=["–ü—Ä–æ—Å—Ç–æ–π", "–†–µ–º–æ–Ω—Ç/–∑–∞–ø—á–∞—Å—Ç–∏", "–ò—Ç–æ–≥–æ"],
            text=[_fmt_money(downtime_cost, currency), _fmt_money(repair_cost, currency),
                  _fmt_money(total_loss, currency)],
            y=[downtime_cost, repair_cost, 0]
        ))
        figw.update_layout(height=320, showlegend=False, yaxis_title=f"{currency}")
        st.plotly_chart(figw, use_container_width=True)

        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Ç–µ—Ä—å –ø–æ —Ü–µ—Ö–∞–º/—Ç–∏–ø–∞–º
        st.subheader("–ü–æ—Ç–µ—Ä–∏ –ø–æ —Ü–µ—Ö–∞–º √ó —Ç–∏–ø–∞–º –ø–æ–ª–æ–º–æ–∫")
        hm = money.pivot_table(values="__loss_total", index="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", columns="–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫", aggfunc="sum",
                               fill_value=0.0)
        if hm.size:
            fig_hm = px.imshow(hm, text_auto=".0f", aspect="auto", labels=dict(color=f"–ü–æ—Ç–µ—Ä–∏, {currency}"))
            st.plotly_chart(fig_hm, use_container_width=True)
        else:
            st.caption("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã.")

        # –¢–æ–ø-–∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã –ø–æ –¥–µ–Ω—å–≥–∞–º
        st.subheader("–¢–û–ü-20 –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ—Ç–µ—Ä—è–º")
        top_inc = money.copy()
        top_inc = top_inc.sort_values("__loss_total", ascending=False).head(20)[[
            "__ts_detect", "–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", "–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å",
            "–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π", "__loss_total"
        ]].rename(columns={
            "__ts_detect": "–î–∞—Ç–∞/–≤—Ä–µ–º—è", "–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è": "–ü—Ä–æ—Å—Ç–æ–π, —á", "–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π": "–†–µ–º–æ–Ω—Ç, ‚ÇΩ",
            "__loss_total": "–ü–æ—Ç–µ—Ä–∏, ‚ÇΩ"
        })
        st.dataframe(top_inc, use_container_width=True, height=380)

        # –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        try:
            bio = io.BytesIO()
            with pd.ExcelWriter(bio, engine="openpyxl") as wr:
                money.to_excel(wr, index=False, sheet_name="–ò–Ω—Ü–∏–¥–µ–Ω—Ç—ã_—Å_–æ—Ü–µ–Ω–∫–æ–π")
                loss_by_eq.rename("–ü–æ—Ç–µ—Ä–∏").reset_index().to_excel(wr, index=False, sheet_name="–ü–æ—Ç–µ—Ä–∏_–ø–æ_–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é")
                hm.reset_index().to_excel(wr, index=False, sheet_name="–ü–æ—Ç–µ—Ä–∏_—Ü–µ—Ö√ó—Ç–∏–ø")
                pd.DataFrame({
                    "–ú–µ—Ç—Ä–∏–∫–∞": ["–ü–æ—Ç–µ—Ä–∏ –æ—Ç –ø—Ä–æ—Å—Ç–æ—è", "–†–µ–º–æ–Ω—Ç/–∑–∞–ø—á–∞—Å—Ç–∏", "–ò—Ç–æ–≥–æ –ø–æ—Ç–µ—Ä—å", "–≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é",
                                "–ù–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏",
                                "ROI, %", "–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å, –º–µ—Å.", "–°—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å–∞, ‚ÇΩ/—á", "–ü–µ—Ä–∏–æ–¥, –º–µ—Å."],
                    "–ó–Ω–∞—á–µ–Ω–∏–µ": [downtime_cost, repair_cost, total_loss, savings_abs, new_total_loss,
                                 None if np.isnan(roi) else roi, None if np.isinf(payback_months) else payback_months,
                                 cost_per_hour, months]
                }).to_excel(wr, index=False, sheet_name="–ò—Ç–æ–≥–∏")
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç (XLSX)", bio.getvalue(),
                               file_name="toir_finance_report.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        except Exception:
            st.caption("–î–ª—è XLSX —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç openpyxl.")

    # ======== –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ (–∫–∞–∫ –±—ã–ª–∏) ========
    with tab0:
        fr = st.radio("–®–∞–≥ –≤—Ä–µ–º–µ–Ω–∏", ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"], horizontal=True)
        code = {"–î–µ–Ω—å": "D", "–ù–µ–¥–µ–ª—è": "W", "–ú–µ—Å—è—Ü": "M"}[fr]
        ts = dff.set_index(pd.to_datetime(dff["__ts_detect"])).sort_index()
        if len(ts):
            trend = ts["ID –∑–∞–ø–∏—Å–∏"].resample(code).count().rename("count").to_frame()
            fig = px.line(trend, y="count", markers=True)
            fig.update_layout(height=320, xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö–æ–ª-–≤–æ")
            st.plotly_chart(fig, use_container_width=True)
            gb = ts.groupby([pd.Grouper(freq=code), "–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å"])["ID –∑–∞–ø–∏—Å–∏"].count().reset_index()
            fig2 = px.bar(gb, x="__ts_detect", y="ID –∑–∞–ø–∏—Å–∏", color="–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å", barmode="stack")
            fig2.update_layout(height=320, xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö–æ–ª-–≤–æ")
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.")
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã")
        st.dataframe(dff.sort_values("__ts_detect", ascending=False).head(20), use_container_width=True)

    with tab1:
        c = dff["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"].value_counts().head(5).reset_index()
        c.columns = ["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", "–ö–æ–ª-–≤–æ"]
        fig = px.bar(c, x="–ö–æ–ª-–≤–æ", y="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", orientation="h")
        fig.update_layout(height=320)
        st.plotly_chart(fig, use_container_width=True)
        pv = dff.pivot_table(index="–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", columns="–¶–µ—Ö / —É—á–∞—Å—Ç–æ–∫", values="ID –∑–∞–ø–∏—Å–∏", aggfunc="count",
                             fill_value=0)
        fig2 = px.imshow(pv, text_auto=True, aspect="auto")
        st.plotly_chart(fig2, use_container_width=True)
        down = dff.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å")["–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"].sum().sort_values(ascending=False).head(10)
        fig3 = px.bar(down.reset_index(), x="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", y="–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è")
        fig3.update_layout(height=320, xaxis_title="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", yaxis_title="–°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π, —á")
        st.plotly_chart(fig3, use_container_width=True)

    with tab2:
        pie = dff["–¢–∏–ø –ø–æ–ª–æ–º–∫–∏"].value_counts(normalize=True).reset_index()
        pie.columns = ["–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", "–î–æ–ª—è"]
        fig = px.pie(pie, names="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", values="–î–æ–ª—è", hole=0.4)
        st.plotly_chart(fig, use_container_width=True)
        sum_down = dff.groupby("–¢–∏–ø –ø–æ–ª–æ–º–∫–∏")["–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è"].sum().reset_index()
        fig2 = px.bar(sum_down, x="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", y="–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è")
        fig2.update_layout(height=320, yaxis_title="–°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π, —á")
        st.plotly_chart(fig2, use_container_width=True)
        st.subheader("–ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—Ç–∏–ø √ó –ø—Ä–∏—á–∏–Ω–∞)")
        tbl = dff.pivot_table(index="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", columns="–ü—Ä–∏—á–∏–Ω–∞ –ø–æ–ª–æ–º–∫–∏", values="ID –∑–∞–ø–∏—Å–∏", aggfunc="count",
                              fill_value=0)
        st.dataframe(tbl, use_container_width=True)

    with tab3:
        closed = dff[dff["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"].notna()].copy()
        if len(closed):
            ontime = (closed["–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"] <= closed["–°—Ä–æ–∫ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (–ø–ª–∞–Ω)"]).mean()
            fig = px.bar(x=["–í —Å—Ä–æ–∫", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω—ã"], y=[ontime * 100, (1 - ontime) * 100])
            fig.update_layout(height=300, yaxis_title="%")
            st.plotly_chart(fig, use_container_width=True)
            mttr_by = closed.groupby("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ")["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, —á"].mean().sort_values()
            fig2 = px.bar(mttr_by.reset_index(), x="–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ", y="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è, —á")
            fig2.update_layout(height=320)
            st.plotly_chart(fig2, use_container_width=True)
            g = closed.dropna(subset=["–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏", "–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"]).copy()
            if len(g):
                fig3 = px.timeline(
                    g, x_start="–î–∞—Ç–∞/–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏", x_end="–î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è",
                    y="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", color="–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å", hover_data=["–°—Ç–∞—Ç—É—Å", "–¢–∏–ø –ø–æ–ª–æ–º–∫–∏"]
                )
                fig3.update_yaxes(autorange="reversed")
                st.plotly_chart(fig3, use_container_width=True)
            else:
                st.caption("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞.")
        else:
            st.info("–ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏.")

    with tab_fin:
        cost_by_eq = dff.groupby("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å")["–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π"].sum().sort_values(
            ascending=False).head(10)
        fig = px.bar(cost_by_eq.reset_index(), x="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å", y="–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π")
        fig.update_layout(height=320, yaxis_title="–°—É–º–º–∞, —É.–µ.")
        st.plotly_chart(fig, use_container_width=True)
        cost_by_type = dff.groupby("–¢–∏–ø –ø–æ–ª–æ–º–∫–∏")["–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π"].sum().reset_index()
        fig2 = px.bar(cost_by_type, x="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏", y="–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π")
        st.plotly_chart(fig2, use_container_width=True)
        agg_fin = dff.groupby("–¢–∏–ø –ø–æ–ª–æ–º–∫–∏").agg(
            –°—Ç–æ–∏–º–æ—Å—Ç—å=("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞ / –∑–∞–ø—á–∞—Å—Ç–µ–π", "sum"),
            –ü—Ä–æ—Å—Ç–æ–π=("–í—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è", "sum"),
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("ID –∑–∞–ø–∏—Å–∏", "count")
        ).reset_index()
        fig3 = px.scatter(agg_fin, x="–°—Ç–æ–∏–º–æ—Å—Ç—å", y="–ü—Ä–æ—Å—Ç–æ–π", size="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", color="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏",
                          hover_name="–¢–∏–ø –ø–æ–ª–æ–º–∫–∏")
        fig3.update_layout(height=320)
        st.plotly_chart(fig3, use_container_width=True)

    with tab5:
        eq_sel = st.selectbox("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", sorted(dff["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"].dropna().unique()))
        sub = dff[dff["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ / –¥–≤–∏–≥–∞—Ç–µ–ª—å"] == eq_sel].copy()
        sub["__ts_detect"] = pd.to_datetime(sub["__ts_detect"])
        sub = sub.dropna(subset=["__ts_detect"])
        ts = sub.set_index("__ts_detect").sort_index()
        if len(ts):
            weekly = ts["ID –∑–∞–ø–∏—Å–∏"].resample("W").count().rename("count").to_frame()
            weekly["sma"] = weekly["count"].rolling(3, min_periods=1).mean()
            last = weekly["sma"].iloc[-1]
            fut = pd.DataFrame({"sma": [last] * 4},
                               index=pd.date_range(weekly.index.max() + pd.Timedelta(days=7), periods=4, freq="W"))
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=weekly.index, y=weekly["count"], mode="lines+markers", name="–§–∞–∫—Ç/–Ω–µ–¥–µ–ª—è"))
            fig.add_trace(go.Scatter(x=weekly.index, y=weekly["sma"], mode="lines", name="SMA(3)"))
            fig.add_trace(go.Scatter(x=fut.index, y=fut["sma"], mode="lines", name="–ü—Ä–æ–≥–Ω–æ–∑", line=dict(dash="dash")))
            fig.update_layout(height=320, xaxis_title="–ù–µ–¥–µ–ª—è", yaxis_title="–ö–æ–ª-–≤–æ")
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é.")

    st.divider()
    st.caption(
        "–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Ç–µ–∫—É—â–µ–π –≤—ã–±–æ—Ä–∫–∏ ‚Äî –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–î–µ–Ω—å–≥–∏ (C-Level)¬ª –∏ ¬´–û–±—â–µ–µ¬ª. –î–ª—è PNG-—ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç `kaleido`.")

else:
    st.title("–ê–Ω–∞–ª–∏–∑ CSV")
    fs_out = st.select_slider("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ì—Ü)", options=[2000, 3200, 5120], value=3200)
    win = st.slider("–û–∫–Ω–æ (—Å–µ–∫)", 0.5, 2.0, 1.0, 0.5)
    up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV (3 –∫–æ–ª–æ–Ω–∫–∏ —Ç–æ–∫–∞)", type=["csv"])
    if up is not None:
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ¬´—Å—ã—Ä–æ–µ¬ª
        raw = pd.read_csv(up)
        st.subheader("–°—ã—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Ñ—Ä–∞–≥–º–µ–Ω—Ç)")
        st.line_chart(raw.head(500))
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –ø–∞–º—è—Ç—å
        up.seek(0);
        data_bytes = up.read()
        tmp = io.BytesIO(data_bytes)
        # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        with st.spinner("–°—á–∏—Ç–∞–µ–º..."):
            # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: tmp_path = "/tmp/upload.csv"
            preds = predict_csv(io.BytesIO(data_bytes), fs_out=fs_out, win_sec=win, overlap=0.0)
        df = pd.DataFrame(preds)
        st.subheader("–¢–∞–π–º–ª–∞–π–Ω –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–µ–ø–µ–Ω–∏")
        c1, c2 = st.columns(2)
        with c1:
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=df.t1, y=df.p_fault, name="p(defect)"))
            st.plotly_chart(fig, use_container_width=True)
        with c2:
            fig2 = go.Figure()
            fig2.add_trace(go.Scatter(x=df.t1, y=df.severity, name="severity (0..100)"))
            st.plotly_chart(fig2, use_container_width=True)

        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¥–µ—Ñ–µ–∫—Ç–æ–≤ (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ñ–∞–π–ª—É)")
        cls = ["bearing_outer", "bearing_inner", "rolling", "cage", "imbalance", "misalignment"]
        avg = np.array(df['proba'].tolist()).mean(axis=0)
        st.bar_chart(pd.DataFrame({"p": avg}, index=cls))

        st.download_button("–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (CSV)", df.to_csv(index=False).encode("utf-8"), file_name="report.csv")